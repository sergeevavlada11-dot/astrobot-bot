import os
import logging
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
from openai import OpenAI, OpenAIError

# ----------------------
# Logging
# ----------------------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("astrobot-final")

# ----------------------
# Env
# ----------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # e.g. https://your-bot.onrender.com
WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}" if WEBHOOK_HOST else None
UNLOCK_CODE = os.getenv("UNLOCK_CODE", "ASTROVIP")
DB_PATH = os.getenv("DB_PATH", "astrobot.sqlite3")

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8080))

if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not WEBHOOK_HOST:
    raise RuntimeError("Set TELEGRAM_TOKEN, OPENAI_API_KEY, WEBHOOK_HOST")

# ----------------------
# Init
# ----------------------
bot = Bot(token=TELEGRAM_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
client = OpenAI(api_key=OPENAI_API_KEY)

# ----------------------
# DB
# ----------------------
def db_init():
    with sqlite3.connect(DB_PATH) as con:
        con.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                paid INTEGER DEFAULT 0,
                free_used INTEGER DEFAULT 0,
                city TEXT,
                birth_date TEXT,
                birth_time TEXT,
                created_at TEXT
            );
        """)
        con.execute("""
            CREATE TABLE IF NOT EXISTS readings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                sphere TEXT,
                subtopic TEXT,
                prompt TEXT,
                answer TEXT,
                created_at TEXT
            );
        """)
        con.commit()

def get_user(uid):
    with sqlite3.connect(DB_PATH) as con:
        cur = con.execute("SELECT user_id, paid, free_used, city, birth_date, birth_time FROM users WHERE user_id=?", (uid,))
        row = cur.fetchone()
        if not row:
            return None
        return {{"user_id": row[0], "paid": bool(row[1]), "free_used": bool(row[2]), "city": row[3], "birth_date": row[4], "birth_time": row[5]}}

def ensure_user(uid):
    u = get_user(uid)
    if u: return u
    with sqlite3.connect(DB_PATH) as con:
        con.execute("INSERT OR IGNORE INTO users (user_id, created_at) VALUES (?, ?)", (uid, datetime.utcnow().isoformat()))
        con.commit()
    return get_user(uid)

def update_user(uid, **fields):
    if not fields: return
    cols = ",".join([f"{{k}}=?" for k in fields.keys()])
    vals = list(fields.values()) + [uid]
    with sqlite3.connect(DB_PATH) as con:
        con.execute(f"UPDATE users SET {{cols}} WHERE user_id=?", vals)
        con.commit()

def save_reading(uid, sphere, sub, prompt, answer):
    with sqlite3.connect(DB_PATH) as con:
        con.execute(
            "INSERT INTO readings (user_id, sphere, subtopic, prompt, answer, created_at) VALUES (?, ?, ?, ?, ?, ?)",
            (uid, sphere, sub, prompt, answer, datetime.utcnow().isoformat())
        )
        con.commit()

def delete_history(uid):
    with sqlite3.connect(DB_PATH) as con:
        con.execute("DELETE FROM readings WHERE user_id=?", (uid,))
        con.commit()

# ----------------------
# UI
# ----------------------
sphere_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üß¨ –õ–∏—á–Ω–æ—Å—Ç—å"), KeyboardButton("üí∞ –î–µ–Ω—å–≥–∏")],
        [KeyboardButton("üíº –ö–∞—Ä—å–µ—Ä–∞"), KeyboardButton("‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è")],
        [KeyboardButton("üåü –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

sub_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìñ –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç")],
        [KeyboardButton("ü™∑ –°–æ–≤–µ—Ç—ã –ø–æ –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏")],
        [KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ñ–µ—Ä–∞–º")]
    ],
    resize_keyboard=True
)

help_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="{PAY_URL}")
)

# ----------------------
# State (in-memory)
# ----------------------
STATE_WAIT_CITY = "wait_city"
STATE_WAIT_DATE = "wait_date"
STATE_WAIT_TIME = "wait_time"
STATE_READY = "ready"

user_state = {}

def set_state(uid, state): user_state[uid] = state
def get_state(uid): return user_state.get(uid)

def fmt_profile(u):
    return f"üìç –ì–æ—Ä–æ–¥: {{u.get('city','‚Äî')}}\nüìÖ –î–∞—Ç–∞: {{u.get('birth_date','‚Äî')}}\n‚è∞ –í—Ä–µ–º—è: {{u.get('birth_time','‚Äî')}}"

SPHERE_MAP = {
    "üß¨ –õ–∏—á–Ω–æ—Å—Ç—å": "–õ–∏—á–Ω–æ—Å—Ç—å (—Å–∏–ª—å–Ω—ã–µ/ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞)",
    "üí∞ –î–µ–Ω—å–≥–∏": "–î–µ–Ω—å–≥–∏ (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º –∏ –∑–æ–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞)",
    "üíº –ö–∞—Ä—å–µ—Ä–∞": "–ö–∞—Ä—å–µ—Ä–∞ (–≥–¥–µ –ª—É—á—à–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –Ω–∞ —á—Ç–æ –¥–µ–ª–∞—Ç—å –∞–∫—Ü–µ–Ω—Ç)",
    "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è": "–û—Ç–Ω–æ—à–µ–Ω–∏—è (–∫–∞–∫–æ–π —á–µ–ª–æ–≤–µ–∫ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–∞—Ä—ã)",
    "üåü –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ": "–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–≤ —á–µ–º –ø—Ä–µ—É—Å–ø–µ—Ç—å –∏ —Å–∏–ª—å–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã)"
}

SUB_MAP = {
    "üìñ –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ": "–æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç": "–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç",
    "ü™∑ –°–æ–≤–µ—Ç—ã –ø–æ –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏": "—Å–æ–≤–µ—Ç—ã –ø–æ –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏"
}

def _valid_date(s):
    try:
        datetime.strptime(s.strip(), "%d.%m.%Y")
        return True
    except:
        return False

def _valid_time(s):
    try:
        datetime.strptime(s.strip(), "%H:%M")
        return True
    except:
        return False

def is_blocked(u):
    return (not u.get("paid")) and u.get("free_used")

async def guard_access(message, u):
    if is_blocked(u):
        await message.answer(
            "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
            "–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã ‚Äî –≤–≤–µ–¥–∏ <b>—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏</b>."
        )
        return False
    return True

async def try_unlock(message):
    text = (message.text or "").strip()
    if text == UNLOCK_CODE:
        update_user(message.from_user.id, paid=1)
        await message.answer("‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! –ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π üéâ", reply_markup=sphere_kb)
        return True
    return False

# ----------------------
# Commands
# ----------------------
@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    db_init(); ensure_user(message.from_user.id)
    text = (
        "‚ú® <b>–ß—Ç–æ —è —É–º–µ—é</b>\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—é —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, –¥–∞—Ç–∞, –≤—Ä–µ–º—è)\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å—Ñ–µ—Ä–∞—Ö: –õ–∏—á–Ω–æ—Å—Ç—å, –î–µ–Ω—å–≥–∏, –ö–∞—Ä—å–µ—Ä–∞, –û—Ç–Ω–æ—à–µ–Ω–∏—è, –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ\n"
        "‚Ä¢ –í –∫–∞–∂–¥–æ–π —Å—Ñ–µ—Ä–µ: –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –ª–µ—Ç, —Å–æ–≤–µ—Ç—ã –ø–æ –≥–∞—Ä–º–æ–Ω–∏–∑–∞—Ü–∏–∏\n\n"
        "üîé –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∂–º–∏ –Ω—É–∂–Ω—É—é —Å—Ñ–µ—Ä—É ‚Äî –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä üí´"
    )
    await message.answer(text, reply_markup=help_kb)

@dp.message_handler(commands=["reset"])
async def cmd_reset(message: types.Message):
    db_init()
    u = ensure_user(message.from_user.id)
    if not u.get("paid"):
        await message.answer("üîí –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.")
        return
    delete_history(u["user_id"])  # —á–∞—Å—Ç–∏—á–Ω—ã–π —Å–±—Ä–æ—Å ‚Äî —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—è
    await message.answer("üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ ‚úÖ")
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É ‚§µÔ∏è", reply_markup=sphere_kb)

@dp.message_handler(commands=["start", "restart"])
async def cmd_start(message: types.Message):
    db_init()
    u = ensure_user(message.from_user.id)
    set_state(u["user_id"], STATE_WAIT_CITY)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üåå –Ø —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–±–æ—Ç-–ø–æ–¥—Ä—É–≥–∞!\n"
        "–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
        "üß≠ –ù–∞–ø–∏—à–∏ <b>–≥–æ—Ä–æ–¥</b> —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞)\n\n"
        "‚ÑπÔ∏è –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å)."
    )

# ----------------------
# Data collection
# ----------------------
@dp.message_handler(lambda m: get_state(m.from_user.id) == STATE_WAIT_CITY)
async def ask_date(message: types.Message):
    if await try_unlock(message): return
    city = message.text.strip()
    if len(city) < 2:
        await message.answer("–•–º, –∫–æ—Ä–æ—Ç–∫–æ. –ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é üèôÔ∏è")
        return
    u = ensure_user(message.from_user.id)
    update_user(u["user_id"], city=city)
    set_state(u["user_id"], STATE_WAIT_DATE)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! ‚ú® –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è <b>–¥–¥.–º–º.–≥–≥–≥–≥</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.07.1995")

@dp.message_handler(lambda m: get_state(m.from_user.id) == STATE_WAIT_DATE)
async def ask_time(message: types.Message):
    if await try_unlock(message): return
    date = message.text.strip()
    if not _valid_date(date):
        await message.answer("–§–æ—Ä–º–∞—Ç –¥—Ä—É–≥–æ–π ü§î –ù—É–∂–Ω–æ: <b>–¥–¥.–º–º.–≥–≥–≥–≥</b>\n–ü—Ä–∏–º–µ—Ä: 03.11.1998")
        return
    u = ensure_user(message.from_user.id)
    update_user(u["user_id"], birth_date=date)
    set_state(u["user_id"], STATE_WAIT_TIME)
    await message.answer("–°—É–ø–µ—Ä! üï∞Ô∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è <b>—á—á:–º–º</b>\n–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ <i>–Ω–µ –∑–Ω–∞—é</i>")

@dp.message_handler(lambda m: get_state(m.from_user.id) == STATE_WAIT_TIME)
async def ready_menu(message: types.Message):
    if await try_unlock(message): return
    t = message.text.strip().lower()
    u = ensure_user(message.from_user.id)
    if t == "–Ω–µ –∑–Ω–∞—é":
        update_user(u["user_id"], birth_time="–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        if not _valid_time(t):
            await message.answer("–ù—É–∂–Ω–æ <b>—á—á:–º–º</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30) ‚è∞\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ <i>–Ω–µ –∑–Ω–∞—é</i>")
            return
        update_user(u["user_id"], birth_time=t)
    set_state(u["user_id"], STATE_READY)
    u = get_user(u["user_id"])
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ\n\n"
        f"{{fmt_profile(u)}}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É ‚§µÔ∏è",
        reply_markup=sphere_kb
    )

# ----------------------
# Flow
# ----------------------
SPHERE_MAP = SPHERE_MAP  # keep for clarity

@dp.message_handler(lambda m: get_state(m.from_user.id) == STATE_READY and m.text in SPHERE_MAP.keys())
async def pick_subtopic(message: types.Message):
    u = ensure_user(message.from_user.id)
    if await try_unlock(message): return
    if not await guard_access(message, u): return
    # save last chosen sphere
    user_state[f"last_sphere_{{message.from_user.id}}"] = message.text
    await message.answer(
        f"–¢—ã –≤—ã–±—Ä–∞–ª–∞: <b>{{message.text}}</b> üí´\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–±–æ—Ä–∞:",
        reply_markup=sub_kb
    )

@dp.message_handler(lambda m: get_state(m.from_user.id) == STATE_READY and m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ñ–µ—Ä–∞–º")
async def back_to_spheres(message: types.Message):
    u = ensure_user(message.from_user.id)
    if await try_unlock(message): return
    if not await guard_access(message, u): return
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É ‚§µÔ∏è", reply_markup=sphere_kb)

@dp.message_handler(lambda m: get_state(m.from_user.id) == STATE_READY and m.text in SUB_MAP.keys())
async def final_generate(message: types.Message):
    uid = message.from_user.id
    u = ensure_user(uid)
    if await try_unlock(message): return
    if not await guard_access(message, u): return

    sphere = user_state.get(f"last_sphere_{{uid}}")
    if not sphere:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É ‚§µÔ∏è", reply_markup=sphere_kb)
        return

    sub = message.text
    birth = get_user(uid)
    birth_text = f"üìç –ì–æ—Ä–æ–¥: {{birth.get('city','‚Äî')}}\nüìÖ –î–∞—Ç–∞: {{birth.get('birth_date','‚Äî')}}\n‚è∞ –í—Ä–µ–º—è: {{birth.get('birth_time','‚Äî')}}"
    sphere_text = SPHERE_MAP[sphere]
    sub_text = SUB_MAP[sub]

    prompt = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, —Å —ç–º–æ–¥–∑–∏, "
        "–±–µ–∑ —Å—Ç—Ä–∞—à–∏–ª–æ–∫, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —Å–≤–æ–±–æ–¥—É –≤—ã–±–æ—Ä–∞. "
        "–î–æ–±–∞–≤—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏ –∏ 2‚Äì3 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ü–µ.\n\n"
        f"–î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è:\n{{birth_text}}\n\n"
        f"–°—Ñ–µ—Ä–∞: {{sphere_text}}\n–ü–æ–¥—Ä–∞–∑–¥–µ–ª: {{sub_text}}"
    )

    try:
        completion = client.chat.completions.create(
            model="gpt-5",
            messages=[
                {{"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π."}},
                {{"role": "user", "content": prompt}},
            ]
        )
        answer = completion.choices[0].message.content
        await message.answer(answer)
        save_reading(uid, sphere, sub, prompt, answer)

        if not u.get("paid") and not u.get("free_used"):
            update_user(uid, free_used=1)
            await message.answer(
                "üîí –¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. "
                "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã ‚Äî –≤–≤–µ–¥–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )

    except OpenAIError:
        log.exception("OpenAI error")
        await message.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ.")
    except Exception:
        log.exception("Unexpected error")
        await message.answer("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑.")

# ----------------------
# Webhook lifecycle
# ----------------------
async def on_startup(dp):
    db_init()
    await bot.set_webhook(WEBHOOK_URL)
    log.info(f"Webhook set: {{WEBHOOK_URL}}")

async def on_shutdown(dp):
    await bot.delete_webhook()
    log.info("Webhook removed")

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
